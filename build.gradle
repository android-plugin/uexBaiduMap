apply plugin: 'com.android.application'

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    compile files('libs/BaiduLBS_Android.jar')
    compile files('libs/aceimageloader.jar')
    compile files('libs/AppCanEngine-system-4.0.0.jar')
}

android {
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    signingConfigs {
        config {
            keyAlias 'android.keystore'
            keyPassword '123456'
            storeFile file('android.keystore')
            storePassword '123456'
        }
    }
    compileSdkVersion 22
    buildToolsVersion "23.0.0"
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    lintOptions {
        abortOnError false
    }
    defaultConfig {
        signingConfig signingConfigs.config
    }
    productFlavors {
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.config
        }
        release {
            signingConfig signingConfigs.config
        }
    }
}

task clearJar(type: Delete) {
    delete 'uexBaiduMap/jar/plugin_uexBaiduMap.jar'
}

task makeJar(type:org.gradle.api.tasks.bundling.Jar) {
    //指定生成的jar名
    baseName 'plugin_uexBaiduMap'
    //从哪里打包class文件
    from('build/intermediates/classes/debug/')
    //打包到jar后的目录结构
    into('')
    //去掉不需要打包的目录和文件
    exclude('uexbaidumap/', 'BuildConfig.class', 'R.class', 'Manifest.class')

    //去掉R$开头的文件
    exclude{it.name.startsWith('R$');it.name.startsWith('Manifest$');}

}

task copyNativeLibs(type: Copy) {
    from fileTree(dir: 'build/libs', include: '*.jar') into 'uexBaiduMap/jar'
}

makeJar.dependsOn(clearJar, build)
copyNativeLibs.dependsOn(makeJar, build)